/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is SciViews-K by Philippe Grosjean et al.
 *
 * Contributor(s):
 *   Philippe Grosjean
 *   ActiveState Software Inc (code inspired from)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsISimpleEnumerator.idl"
//#include "koIRunService.idl"

// This is implemented in sv.rconn's JavaScript code.
[scriptable, uuid(CA1BCF00-394D-11E0-BD69-0002A5D5C51B)]
interface svIStuffListener: nsISupports {
    wstring onStuff(in wstring data);
};

[scriptable, uuid(22D0115A-0BC6-609F-194A-6F79EEA56633)]
interface svICommandInfo: nsISupports {
    readonly attribute string commandId;
    readonly attribute wstring command;
    readonly attribute string mode;
};


[scriptable, uuid(22A6C234-CC35-D374-2F01-FD4C605C905C)]
interface svIUtils : nsISupports {
    nsISimpleEnumerator getproc(in string propertyName);
	wstring	execInR(in wstring command, in string mode);
	void	execInRBgr(in wstring command, in string mode, in string uid);
	PRInt32 startSocketServer(in svIStuffListener requestHandler);
	void stopSocketServer();
	void setSocketInfo(in string host, in long port, in boolean outgoing);
	readonly attribute wstring lastCommand;
	readonly attribute wstring lastResult;
	attribute wstring id;
	boolean serverIsUp();
	wstring pushLeft(in wstring text, in string eol, in long indent, in long tabwidth);

    void escape();
    void calltip(in wstring text);
    void complete(in wstring text);
};

//[scriptable, uuid(16F32A31-EA47-5079-2F26-D98DC068E776)]
//interface svRunService : nsISupports {
//	koIRunProcess RunAndNotify(in wstring command, in wstring cwd,
//        in wstring env, in AString input);
//	koIRunProcess RunInTerminalAndNotify(in wstring command, in wstring cwd,
//        in wstring env, in AString input);
//};
